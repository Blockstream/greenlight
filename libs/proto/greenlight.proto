syntax = "proto3";
package greenlight;

// The node service represents your node running on greenlight's
// infrastructure. You can use the exposed RPC methods to interact
// with your node. The URI used to connect to the node depends on
// where the node is being scheduled and is returned by the
// `Scheduler.Schedule()` RPC call.
//
// Notice that in order to connect to the node the caller must use the
// node-specific mTLS keypair returned by `Scheduler.Register()` or
// `Scheduler.Recover()`. In particular the anonymous mTLS keypair is
// rejected by the node.
//
// Deprecated methods are being replaced by the standardized and
// automatically managed cln-grpc protocol you can find in
// `node.proto`
service Node {
	// Retrieve general information about the node.
	rpc GetInfo(GetInfoRequest) returns (GetInfoResponse) {
	  option deprecated = true;
	}

	// The stop is a RPC command to shut off the c-lightning node
	rpc Stop(StopRequest) returns (StopResponse) {
	  option deprecated = true;
	}

	// Connect to a node in the network. (`Connect` alone clashes
	// with tonic internals).
	rpc ConnectPeer(ConnectRequest) returns (ConnectResponse) {
	  option deprecated = true;
	}

	rpc ListPeers(ListPeersRequest) returns (ListPeersResponse) {
	  option deprecated = true;
	}

	// The disconnect RPC command closes an existing connection to
	// a peer, identified by node_id, in the Lightning Network, as long
	// as it doesn't have an active channel. If force is set then
	// it will disconnect even with an active channel.
	rpc Disconnect(DisconnectRequest) returns (DisconnectResponse) {
	  option deprecated = true;
	}

	// The newaddr RPC command generates a new address which can
	// subsequently be used to fund channels managed by the
	// c-lightning node.
	rpc NewAddr(NewAddrRequest) returns (NewAddrResponse) {
	  option deprecated = true;
	}

	// Retrieve a list of funds managed by this node.
	//
	// This includes both on-chain funds and off-chain
	// funds. Off-chain funds are bound to a channel, and we
	// consider only the balance that is currently spendable by
	// the node, i.e., we do not return the full channel's
	// capacity, just the balance that belongs to this node.
	//
	// The on-chain funds correspond to outputs that the wallet
	// can spend.
	rpc ListFunds(ListFundsRequest) returns (ListFundsResponse) {
	  option deprecated = true;
	}

	rpc Withdraw(WithdrawRequest) returns (WithdrawResponse) {
	  option deprecated = true;
	}

	rpc FundChannel(FundChannelRequest) returns (FundChannelResponse) {
	  option deprecated = true;
	}

	rpc CloseChannel(CloseChannelRequest) returns (CloseChannelResponse) {
	  option deprecated = true;
	}

        // Create a new invoice to receive an incoming payment.
	rpc CreateInvoice(InvoiceRequest) returns (Invoice) {
	  option deprecated = true;
	}

	rpc Pay(PayRequest) returns (Payment) {
	  option deprecated = true;
	}

	// Send a spontaneous payment, optionally with some extra information.
	rpc Keysend(KeysendRequest) returns (Payment) {
	  option deprecated = true;
	}

	// Retrieve a list of payment performed by this node.
	//
	// The query can optionally be restricted to a single payment
	// matching criteria that can be specified in the
	// `ListPaymentsRequest`
	//
	// Notice: this does not include any payment that were
	// received by this node, just the outgoing payments. Incoming
	// payments can be retrieved using `ListInvoices`
	rpc ListPayments(ListPaymentsRequest) returns (ListPaymentsResponse) {}

	// Retrieve invoices that were created via CreateInvoice
	//
	// The query can optionally be restricted to only return a
	// single invoice matching the given criteria.
        rpc ListInvoices(ListInvoicesRequest) returns (ListInvoicesResponse) {}

	// Stream incoming payments
	//
	// Currently includes off-chain payments received matching an
	// invoice or spontaneus paymens through keysend.
	rpc StreamIncoming(StreamIncomingFilter) returns (stream IncomingPayment) {}

	// Stream the logs as they are produced by the node
	//
	// Mainly intended for debugging clients by tailing the log as
	// they are written on the node. The logs start streaming from
	// the first beginning, in order to allow inspection of events
	// after an error occurred, That also means that the logs can
	// be rather large, and should not be streamed onto
	// resource-constrained devices.
	rpc StreamLog(StreamLogRequest) returns (stream LogEntry) {}

	// Listen for incoming `custommsg` messages from peers.
	//
	// The messages are forwarded as they come in, and will not be
	// replayed if the stream is interrupted.
	rpc StreamCustommsg(StreamCustommsgRequest) returns (stream Custommsg) {}

	//////////////////////////////// HSM Messages ////////////////////////
	//
	// The following messages are related to communicating HSM
	// requests back and forth. Chances are you won't need to
	// interact with these at all, unless you want to embed the
	// hsmd into your client. We recommend using a standalone hsmd
	// such as hagrid, keeper of keys, to get started.
	//
	// Stream requests from the node to any key device that can
	// respond to them.
	rpc StreamHsmRequests(Empty) returns (stream HsmRequest) {}

	rpc RespondHsmRequest(HsmResponse) returns (Empty) {}

}

message HsmRequestContext {
	bytes node_id = 1;
	uint64 dbid = 2;
	uint64 capabilities = 3;
}

message HsmResponse {
	uint32 request_id = 1;
	bytes raw = 2;

	// A list of updated key-value-version tuples that is to be
	// merged into the state tracked by the plugin.
	repeated SignerStateEntry signer_state = 5;
}

message HsmRequest {
	uint32 request_id = 1;
	HsmRequestContext context = 2;
	bytes raw = 3;

	// A list of key-value-version tuples that the signer should
	// use to update its internal state.
	repeated SignerStateEntry signer_state = 4;

	// Currently active requests that are used to justify changes
	// in state.
	repeated PendingRequest requests = 5;
}

message Empty {}
service Hsm {
	rpc Request(HsmRequest) returns (HsmResponse) {}
	rpc Ping(Empty) returns (Empty) {}
}

enum NetAddressType {
	Ipv4 = 0;
	Ipv6 = 1;
	TorV2 = 2;
	TorV3 = 3;
}
message Address {
	NetAddressType type = 1;
	string addr = 2;
	uint32 port = 3;
}

message GetInfoRequest {}

message GetInfoResponse {
	bytes node_id = 1;
	string alias = 2;
	bytes color = 3;
	uint32 num_peers = 4;
	repeated Address addresses = 5;
	string version = 6;
	uint32 blockheight = 7;
	string network = 8;
}

message StopRequest {}
message StopResponse {}

message ConnectRequest {
	string node_id = 1;
	string addr = 2;
}

message ConnectResponse {
	string node_id = 1;
	string features = 2;
}


message ListPeersRequest {
	string node_id = 1;
}

message Htlc {
	string direction = 1;
	uint64 id = 2;
	string amount = 3;
	uint64 expiry = 4;
	string payment_hash = 5;
	string state = 6;
	bool local_trimmed = 7;
}

message Aliases {
	string local = 1;
	string remote = 2;
}

message Channel {
	string state = 1;
	string owner = 2;
	Aliases alias = 18;
	string short_channel_id = 3;
	uint32 direction = 4;
	string channel_id = 5;
	string funding_txid = 6;
	string close_to_addr = 7;
	string close_to = 8;
	bool private = 9;
	string total = 10;
	string dust_limit = 11;
	string spendable = 12;
	string receivable = 13;
	uint32 their_to_self_delay = 14;
	uint32 our_to_self_delay = 15;
	repeated string status = 16;
	repeated Htlc htlcs = 17;
}

message Peer {
	bytes id = 1;
	bool connected = 2;
	repeated Address addresses = 3;
	string features = 4;
	repeated Channel channels = 5;
}

message ListPeersResponse {
	repeated Peer peers = 1;
}

message DisconnectRequest {
	string node_id = 1;
	bool force = 2;
}

message DisconnectResponse {}

enum BtcAddressType {
	BECH32 = 0; // Default
	P2SH_SEGWIT = 1;
}

message NewAddrRequest {
	BtcAddressType address_type = 1;
}
message NewAddrResponse {
	BtcAddressType address_type = 1;
	string address = 2;
}

message ListFundsRequest {
	Confirmation minconf = 1;
}

enum OutputStatus {
	CONFIRMED = 0;
	UNCONFIRMED = 1;
}

message ListFundsOutput {
	Outpoint output = 1;
	Amount amount = 2;
	string address = 4;
	OutputStatus status = 5;
	bool reserved = 6;
	uint32 reserved_to_block = 7;
}

message ListFundsChannel {
	bytes peer_id = 1;
	bool connected = 2;
	uint64 short_channel_id = 3;
	uint64 our_amount_msat = 4;
	uint64 amount_msat = 5;
	bytes funding_txid = 6;
	uint32 funding_output = 7;
}

message ListFundsResponse {
	repeated ListFundsOutput outputs = 1;
	repeated ListFundsChannel channels = 2;
}

// Let the node decide what feerate to apply based on its internal
// view of the network's current feerate.
enum FeeratePreset {
	NORMAL = 0;
	SLOW = 1;
	URGENT = 2;
}

message Feerate {
	oneof value {
		FeeratePreset preset = 1;
		uint64 perkw = 5;
		uint64 perkb = 6;
	}
}

message Confirmation {
	uint32 blocks = 1;
}

message WithdrawRequest {
	string destination = 1;
	Amount amount = 2;
	Feerate feerate = 3;
	Confirmation minconf = 7;
	repeated Outpoint utxos = 8;
}

message WithdrawResponse {
	bytes tx = 1;
	bytes txid = 2;
}

// TODO: Extract AmountOrAll into its own message
// TODO: Extract Feerate into its own message

message FundChannelRequest {
	bytes node_id = 1;
	Amount amount = 2;
	Feerate feerate = 3;
	bool announce = 7;
	Confirmation minconf = 8;
	//TODO Maybe add UTXOS
	string close_to = 10;
}

message Outpoint {
	bytes txid = 1;
	uint32 outnum = 2;
}

message FundChannelResponse {
	bytes tx = 1;
	Outpoint outpoint = 2;
	bytes channel_id = 3;
	string close_to = 4;
}

message Timeout {
	uint32 seconds = 1;
}

message BitcoinAddress {
	string address = 1;
}

message CloseChannelRequest {
	bytes node_id = 1;
	Timeout unilateraltimeout = 2;
	BitcoinAddress destination = 3;
}

enum CloseChannelType {
	MUTUAL = 0;
	UNILATERAL = 1;
}

message CloseChannelResponse {
	CloseChannelType close_type = 1;
	bytes tx = 2;
	bytes txid = 3;
}

message Amount {
	oneof unit {
		uint64 millisatoshi = 1;
		uint64 satoshi = 2;
		uint64 bitcoin = 3;
		bool all = 4;
		bool any = 5;
	}
}

message InvoiceRequest {
	Amount amount = 1;
	string label = 2;
	string description = 3;
	bytes preimage = 4;
}

enum InvoiceStatus {
	UNPAID = 0;
	PAID = 1;
	EXPIRED = 2;
}

message Invoice {
	string label = 1;
	string description = 2;
	Amount amount = 3;
	Amount received = 4;
	InvoiceStatus status = 5;
	uint32 payment_time = 6;
	uint32 expiry_time = 7;
	string bolt11 = 8;
	bytes payment_hash = 9;
	bytes payment_preimage = 10;
}

message PayRequest {
	string bolt11 = 1;

	// Only needed when the invoice does not specify an amount.
	Amount amount = 2;

	// Non-zero number of seconds before we should stop retrying
	// the payment and return an error.
	uint32 timeout = 3;

	double maxfeepercent = 4;

	Amount maxfee = 5;
}

enum PayStatus {
	PENDING = 0;
	COMPLETE = 1;
	FAILED = 2;
}

message Payment {
	bytes destination = 1;
	bytes payment_hash = 2;
	bytes payment_preimage = 3;
	PayStatus status = 4;
	Amount amount = 5;
	Amount amount_sent = 6;
	string bolt11 = 7;

	// UTC Unix timestamp of the time the invoice was created.
	double created_at = 8;
	// UTC Unix timestamp of the time the payment was completed
	// (successfully or failed). 0 if not completed yet.
	uint64 completed_at = 9;
}

// A payment identifier is a way to reference a unique payment, either
// by its bolt11 string or just the payment hash. Only one of the two
// may be provided at once, since having multiple ones may conflict
// with each other.
message PaymentIdentifier {
	oneof id {
		string bolt11 = 1;
		bytes payment_hash = 2;
	}
}

// Request a list of payments that this node has performed. Optionally
// the query can be narrowed to a single payment by providing an
// identifier.
message ListPaymentsRequest {
	PaymentIdentifier identifier = 1;
}

// The response matching `ListPaymentRequest`. It returns a list of
// PayResponses, i.e., the same format as `Pay` returned its result.
message ListPaymentsResponse {
	repeated Payment payments = 1;
}

message InvoiceIdentifier {
	oneof id {
		string label = 1;
		string invstring = 2;
		bytes payment_hash = 3;
	}
}

message ListInvoicesRequest {
	InvoiceIdentifier identifier = 1;
}

// Options to stream_incoming to specify what to stream.
message StreamIncomingFilter {
}

message ListInvoicesResponse {
	repeated Invoice invoices = 1;
}

message TlvField {
	uint64 type = 1;
	// length is implied since the value field carries its own
	// length here.
	bytes value = 2;
}

message OffChainPayment {
	string label = 1;
	bytes preimage = 2;
	Amount amount = 3;
	repeated TlvField extratlvs = 4;
	bytes payment_hash = 5;
	string bolt11 = 6;
}

message IncomingPayment {
	oneof details {
		OffChainPayment offchain = 1;
	}
}

// A single hop in a Routehint
message RoutehintHop {
	bytes node_id = 1;
	string short_channel_id = 2;
	uint64 fee_base = 3;
	uint32 fee_prop = 4;
	uint32 cltv_expiry_delta = 5;
}

message Routehint {
	repeated RoutehintHop hops = 1;
}

message KeysendRequest {
	bytes node_id = 1;
	Amount amount = 2;
	string label = 3;
	repeated Routehint routehints = 4;
	repeated TlvField extratlvs = 5;
}

message StreamLogRequest {};
message LogEntry {
	string line = 1;
}

message SignerStateEntry {
	uint64 version = 1;
	string key = 2;
	bytes value = 3;
}

// This represents a grpc request that is currently pending, along
// with the pubkey of the client issuing the request and a matching
// signature. This allows the signer to verify that the state changes
// implied in a signature request correspond to authentic grpc
// commands, and were not injected somewhere along the way.
message PendingRequest {
	bytes request = 1;
	string uri = 2;
	bytes signature = 3;
	bytes pubkey = 4;
        uint64 timestamp = 5;
}


// The `NodeConfig` is used to pass startup parameters to the
// node. The `gl-plugin` will look for a file in its directory to load
// these values from. Please refer to the individual fields to learn
// what they do.
message NodeConfig {
	// In order to start without a signer attached we need to
	// stash a couple of canned messages that we'd otherwise ask
	// from the signer. These are just request-response tuples
	// that we use to match and reply against incoming requests.
	repeated StartupMessage startupmsgs = 1;
}

// A message that we know will be requested by `lightningd` at
// startup, and that we stash a response to on the scheduler. This
// allows the scheduler to start a node without requiring the signer
// to connect first. Messages are stored in full, including type
// prefix, but without the length prefix.
message StartupMessage {
  bytes request = 1;
  bytes response = 2;
}

message StreamCustommsgRequest {}

message Custommsg {
  bytes peer_id = 1;
  bytes payload = 2;
}
