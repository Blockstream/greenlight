from typing import TextIO, List, Dict, Any
from textwrap import dedent
import logging

from msggen.gen import IGenerator
from msggen.gen.grpc.util import (
    typemap,
    method_name_overrides,
    notification_typename_overrides,
)
from msggen.model import (
    ArrayField,
    Field,
    CompositeField,
    EnumField,
    PrimitiveField,
    Service,
    MethodName,
    TypeName,
    Notification,
    Method,
)


class UdlGenerator(IGenerator):
    def __init__(self, dest: TextIO, meta: Dict[str, Any]):
        self.dest = dest
        self.logger = logging.getLogger("glmsggen.udlgen.UdlGenerator")
        self.meta = meta

    def write(self, text: str, cleanup: bool = True) -> None:
        if cleanup:
            self.dest.write(dedent(text))
        else:
            self.dest.write(text)

    def generate(self, service: Service) -> None:
        self.write(
            """
        namespace glclient {
        };\n"""
        )

        self.generate_methods(service)

        # self.write("""
        # }; /* End of namespace glclient */\n\n
        # """)
        self.generate_return_types(service)
        self.generate_argument_types(service)

    def generate_methods(self, service) -> None:
        self.write("\ninterface Node {\n")
        self.write("  constructor();")
        for method in service.methods:
            self.write(
                f"""  {method.response.typename} {method.name.replace('-', '')}({method.request.typename} request);\n""",
                False,
            )
        self.write("};")

    def generate_return_types(self, service) -> None:
        for method in service.methods:
            self.write(f"dictionary {str(method.response.typename)} {{\n", False)
            self.write(f"}};\n\n", False)

    def generate_argument_types(self, service) -> None:
        for method in service.methods:
            self.write(f"dictionary {str(method.request.typename)} {{\n", False)
            self.write("};\n\n", False)


class RustGenerator(IGenerator):
    def __init__(self, dest: TextIO, meta: Dict[str, Any]):
        self.dest = dest
        self.logger = logging.getLogger("glmsggen.udlgen.RustGenerator")
        self.meta = meta

    def write(self, s: str):
        self.dest.write(dedent(s))

    def generate(self, service: Service) -> None:
        self.write(
            """\
        // This file was auto-generated by `gl-msggen`. Do not edit, as changes
        // are lost when regenerating. See http://bit.ly/48GGgcJ for details on
        // the generator.

        """
        )

        self.generate_responses(service)
        self.generate_requests(service)
        self.generate_methods(service)

    def generate_responses(self, service: Service) -> None:
        """Generate the response structs we're going to be returning."""

        for m in service.methods:
            self.write("#[allow(non_camel_case_types)]\n#[derive(Clone, Debug)]\n")
            self.write(f"pub struct {m.response.typename} {{\n")
            # TODO Iterate and maybe generate child structs
            self.write("}\n\n")

    def generate_requests(self, service: Service) -> None:
        """Generate request structs."""

        for m in service.methods:
            self.write("#[allow(non_camel_case_types)]\n")
            self.write("#[derive(Clone, Debug)]\n")
            self.write(f"pub struct {m.request.typename} {{\n")
            for field in m.request.
            # TODO Iterate and generate child structs
            self.write("}\n\n")

    def generate_methods(self, service: Service) -> None:
        self.write("pub struct Node {\n")
        self.write("}\n\n")
        self.write("impl Node {\n\n")

        self.write("  pub fn new() -> Node {\n  Node {  }\n}\n")

        for m in service.methods:
            self.write("#[allow(non_snake_case)]\n")
            self.write(
                f"pub fn {m.name.replace('-', '')}(&self, request: {m.request.typename}) -> {m.response.typename} {{\n"
            )
            self.write("  dbg!(request);\n")
            self.write("  unimplemented!();\n")
            self.write("}\n\n")

        self.write("} // End of struct Node")
