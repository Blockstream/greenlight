import pytest
from glclient import Node, TlsConfig

auth_blob = b'\n\x94\x1f-----BEGIN CERTIFICATE-----\nMIIDNzCCAt6gAwIBAgIUMV8oPlhEmDl1j0tb09vO2Wy2cGowCgYIKoZIzj0EAwIw\ngb8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1T\nYW4gRnJhbmNpc2NvMQ0wCwYDVQQKEwRUZXN0MR0wGwYDVQQLExRDZXJ0aWZpY2F0\nZUF1dGhvcml0eTFVMFMGA1UEAxNMR0wgL3VzZXJzLzAyMDU4ZThiNmMyYWQzNjNl\nYzU5YWExMzY0MjkyNTZkNzQ1MTY0YzJiZGM4N2Y5OGYwYTY4NjkwZWMyYzVjOWIw\nYjAeFw0yMzEwMDkxODEyMDBaFw0yNDEwMDgxODEyMDBaMIHeMQswCQYDVQQGEwJV\nUzETMBEGA1UECBMKQ0FMSUZPUk5JQTEWMBQGA1UEBxMNU0FOIEZSQU5DSVNDTzEU\nMBIGA1UEChMLQmxvY2tzdHJlYW0xHTAbBgNVBAsTFENlcnRpZmljYXRlQXV0aG9y\naXR5MW0wawYDVQQDE2QvdXNlcnMvMDIwNThlOGI2YzJhZDM2M2VjNTlhYTEzNjQy\nOTI1NmQ3NDUxNjRjMmJkYzg3Zjk4ZjBhNjg2OTBlYzJjNWM5YjBiL3JlY292ZXJl\nZC0wMjAyMDIwMjAyMDIwMjAyMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEuAVa\n6Cgm1d4vLoEYQIdrImAvpoaxZbuisnGqoIh0zrmJL19lLzv1AxE/HddGqunUQnA3\nZM+qtKBz34YeUjgXEaOBljCBkzAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYI\nKwYBBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAwHQYDVR0OBBYEFDXagEOH\nayqOr9liu96qRnyNgn98MB8GA1UdIwQYMBaAFMpyGaHS8P3eWTBRi37mIhmfv1Z7\nMBQGA1UdEQQNMAuCCWxvY2FsaG9zdDAKBggqhkjOPQQDAgNHADBEAiBEDrJMYlix\n4NezRRDVwFJhSxMrvkmrF8tI3xz1xgeauQIgBm6A4FbPPQJavn7luCPga86Uto1P\nXiStAdVHV0qFbPM=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIICxTCCAmugAwIBAgIUTmEaZbxxujJqv9xM3/4in3+WiKgwCgYIKoZIzj0EAwIw\nfDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNh\nbiBGcmFuY2lzY28xDTALBgNVBAoTBFRlc3QxHTAbBgNVBAsTFENlcnRpZmljYXRl\nQXV0aG9yaXR5MRIwEAYDVQQDEwlHTCAvdXNlcnMwHhcNMjMxMDA5MTgxMjAwWhcN\nMzMxMDA2MTgxMjAwWjCBvzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3Ju\naWExFjAUBgNVBAcTDVNhbiBGcmFuY2lzY28xDTALBgNVBAoTBFRlc3QxHTAbBgNV\nBAsTFENlcnRpZmljYXRlQXV0aG9yaXR5MVUwUwYDVQQDE0xHTCAvdXNlcnMvMDIw\nNThlOGI2YzJhZDM2M2VjNTlhYTEzNjQyOTI1NmQ3NDUxNjRjMmJkYzg3Zjk4ZjBh\nNjg2OTBlYzJjNWM5YjBiMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEW+kAIFpv\ndNwPN0v4pSK2z7VxAu03em/rbXQWrDwiIA1M9JVBIsGitOrcsllGa1jTK0GF1Fvc\n0zyYnaDYoO7xmaOBhjCBgzAOBgNVHQ8BAf8EBAMCAaYwHQYDVR0lBBYwFAYIKwYB\nBQUHAwEGCCsGAQUFBwMCMBIGA1UdEwEB/wQIMAYBAf8CAQMwHQYDVR0OBBYEFMpy\nGaHS8P3eWTBRi37mIhmfv1Z7MB8GA1UdIwQYMBaAFKu6rTboyH8sHt0CJiiC8OSZ\ncb0nMAoGCCqGSM49BAMCA0gAMEUCIQCQoS56ArmppNQX/ACaF0t1ZfrLlLxcNcmo\nSykb2ex7WQIgJ8xELAMKCb9jiDZZCdMmwXnjvQajkgpsoaxjgrO39rk=\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIICfDCCAiKgAwIBAgIUZi+V8Ghy8OPBg9Hgz4rqXD+YbikwCgYIKoZIzj0EAwIw\ndzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNh\nbiBGcmFuY2lzY28xDTALBgNVBAoTBFRlc3QxHTAbBgNVBAsTFENlcnRpZmljYXRl\nQXV0aG9yaXR5MQ0wCwYDVQQDEwRHTCAvMB4XDTIzMTAwOTE4MTIwMFoXDTMzMTAw\nNjE4MTIwMFowfDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAU\nBgNVBAcTDVNhbiBGcmFuY2lzY28xDTALBgNVBAoTBFRlc3QxHTAbBgNVBAsTFENl\ncnRpZmljYXRlQXV0aG9yaXR5MRIwEAYDVQQDEwlHTCAvdXNlcnMwWTATBgcqhkjO\nPQIBBggqhkjOPQMBBwNCAAQDjt//SctbHoqclmY5v5alFpJMx6CRp7gUQnkSJ0Gz\nzNOxt/ObFZZNAjtVh+t5qR3NEti8MCYm0SsHAp3hdATlo4GGMIGDMA4GA1UdDwEB\n/wQEAwIBpjAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwEgYDVR0TAQH/\nBAgwBgEB/wIBAzAdBgNVHQ4EFgQUq7qtNujIfywe3QImKILw5JlxvScwHwYDVR0j\nBBgwFoAUF4Bwn1amE0auKlWoTMlYVfWPEsMwCgYIKoZIzj0EAwIDSAAwRQIgJMTM\n5C8t/QPIbnYXZ8zpJ/10TycgIIkU7h+xhkcUkfgCIQD0F6kegNekuvkC0MxgtMqk\nlQkWoQKjj7eztJQbEm+LeQ==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIICVDCCAfqgAwIBAgIUaHTRJRJRgHwPH0NorrkoNUqqOGAwCgYIKoZIzj0EAwIw\ndzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNh\nbiBGcmFuY2lzY28xDTALBgNVBAoTBFRlc3QxHTAbBgNVBAsTFENlcnRpZmljYXRl\nQXV0aG9yaXR5MQ0wCwYDVQQDEwRHTCAvMB4XDTIzMTAwOTE4MTIwMFoXDTMzMTAw\nNjE4MTIwMFowdzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAU\nBgNVBAcTDVNhbiBGcmFuY2lzY28xDTALBgNVBAoTBFRlc3QxHTAbBgNVBAsTFENl\ncnRpZmljYXRlQXV0aG9yaXR5MQ0wCwYDVQQDEwRHTCAvMFkwEwYHKoZIzj0CAQYI\nKoZIzj0DAQcDQgAEEOcMx3zcuncVRNbyc4FibpcZm13Vdtuwu2WIJPfH03NYapU4\ndmrVV8S+tMwLo7pv1GYCf6W9GrTOUGdfqLH+z6NkMGIwDgYDVR0PAQH/BAQDAgGm\nMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjASBgNVHRMBAf8ECDAGAQH/\nAgEDMB0GA1UdDgQWBBQXgHCfVqYTRq4qVahMyVhV9Y8SwzAKBggqhkjOPQQDAgNI\nADBFAiA20g6mC3KAtbR+h+Vu9NQyc57VAmQ060j70ZjRvCBLyAIhAK4mapFeV38v\nmsl9VP+ai/RrKVsvxeo5JpujYT5ZrpOA\n-----END CERTIFICATE-----\n\x12\xf6\x01-----BEGIN PRIVATE KEY-----\r\nMIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQggMPZ58J1oC3vhTcX\r\nZz+NAwaluPKIb+nQ+D/BD07Ki0yhRANCAAS4BVroKCbV3i8ugRhAh2siYC+mhrFl\r\nu6KycaqgiHTOuYkvX2UvO/UDET8d10aq6dRCcDdkz6q0oHPfhh5SOBcR\r\n-----END PRIVATE KEY-----\r\n\x1a\xe3\x06-----BEGIN CERTIFICATE-----\nMIICVDCCAfqgAwIBAgIUaHTRJRJRgHwPH0NorrkoNUqqOGAwCgYIKoZIzj0EAwIw\ndzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAUBgNVBAcTDVNh\nbiBGcmFuY2lzY28xDTALBgNVBAoTBFRlc3QxHTAbBgNVBAsTFENlcnRpZmljYXRl\nQXV0aG9yaXR5MQ0wCwYDVQQDEwRHTCAvMB4XDTIzMTAwOTE4MTIwMFoXDTMzMTAw\nNjE4MTIwMFowdzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExFjAU\nBgNVBAcTDVNhbiBGcmFuY2lzY28xDTALBgNVBAoTBFRlc3QxHTAbBgNVBAsTFENl\ncnRpZmljYXRlQXV0aG9yaXR5MQ0wCwYDVQQDEwRHTCAvMFkwEwYHKoZIzj0CAQYI\nKoZIzj0DAQcDQgAEEOcMx3zcuncVRNbyc4FibpcZm13Vdtuwu2WIJPfH03NYapU4\ndmrVV8S+tMwLo7pv1GYCf6W9GrTOUGdfqLH+z6NkMGIwDgYDVR0PAQH/BAQDAgGm\nMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjASBgNVHRMBAf8ECDAGAQH/\nAgEDMB0GA1UdDgQWBBQXgHCfVqYTRq4qVahMyVhV9Y8SwzAKBggqhkjOPQQDAgNI\nADBFAiA20g6mC3KAtbR+h+Vu9NQyc57VAmQ060j70ZjRvCBLyAIhAK4mapFeV38v\nmsl9VP+ai/RrKVsvxeo5JpujYT5ZrpOA\n-----END CERTIFICATE-----\n"\xf4\x01DPFCg0_-el8Y1scB6iRaVnl1Nu8nDltugBqbkFvJRnc9ZGV2aWNlLWdsMCZwdWJrZXk9MDRiODA1NWFlODI4MjZkNWRlMmYyZTgxMTg0MDg3NmIyMjYwMmZhNjg2YjE2NWJiYTJiMjcxYWFhMDg4NzRjZWI5ODkyZjVmNjUyZjNiZjUwMzExM2YxZGQ3NDZhYWU5ZDQ0MjcwMzc2NGNmYWFiNGEwNzNkZjg2MWU1MjM4MTcxMQ=='

def test_create_node():
    """Checks if the node binding is correctly mapped to the node builder.
    
    We check if the correct assertions are raised if the node can not be built
    from the given parameters.
    """
    # Check missing rune, tls and auth.
    with pytest.raises(ValueError, match="TLS configuration is missing"):
        Node(b'0x00000000', "regtest", "localhost")

    # Check valid rune but missing tls.
    with pytest.raises(ValueError, match="TLS configuration is missing"):
        Node(b'0x00000000', "regtest", "localhost", rune="KUhZzNlECC7pYsz3QVbF1TqjIUYi3oyESTI7n60hLMs9MA==")

    # Now all is present (but we gave a tlsConfig without an identity)
    with pytest.raises(ValueError, match="could not connect to node: Cannot connect a node::Client without first configuring its identity"):
        Node(b'0x00000000', "regtest", "localhost", rune="KUhZzNlECC7pYsz3QVbF1TqjIUYi3oyESTI7n60hLMs9MA==", tls=TlsConfig())

    # Set by auth blob (can still not be called as the grpc_uri is wrong)
    node = Node(b'0x00000000', "regtest", "localhost", auth=auth_blob)
