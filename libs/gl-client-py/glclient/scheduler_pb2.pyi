"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import glclient.greenlight_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _ChallengeScope:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _ChallengeScopeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ChallengeScope.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    REGISTER: _ChallengeScope.ValueType  # 0
    RECOVER: _ChallengeScope.ValueType  # 1

class ChallengeScope(_ChallengeScope, metaclass=_ChallengeScopeEnumTypeWrapper):
    """Operation is the challenge associated with?"""

REGISTER: ChallengeScope.ValueType  # 0
RECOVER: ChallengeScope.ValueType  # 1
global___ChallengeScope = ChallengeScope

@typing.final
class AddOutgoingWebhookRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NODE_ID_FIELD_NUMBER: builtins.int
    URI_FIELD_NUMBER: builtins.int
    node_id: builtins.bytes
    uri: builtins.str
    def __init__(
        self,
        *,
        node_id: builtins.bytes = ...,
        uri: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["node_id", b"node_id", "uri", b"uri"]) -> None: ...

global___AddOutgoingWebhookRequest = AddOutgoingWebhookRequest

@typing.final
class AddOutgoingWebhookResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    SECRET_FIELD_NUMBER: builtins.int
    id: builtins.int
    secret: builtins.str
    def __init__(
        self,
        *,
        id: builtins.int = ...,
        secret: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["id", b"id", "secret", b"secret"]) -> None: ...

global___AddOutgoingWebhookResponse = AddOutgoingWebhookResponse

@typing.final
class ListOutgoingWebhooksRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NODE_ID_FIELD_NUMBER: builtins.int
    node_id: builtins.bytes
    def __init__(
        self,
        *,
        node_id: builtins.bytes = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["node_id", b"node_id"]) -> None: ...

global___ListOutgoingWebhooksRequest = ListOutgoingWebhooksRequest

@typing.final
class Webhook(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    URI_FIELD_NUMBER: builtins.int
    id: builtins.int
    uri: builtins.str
    def __init__(
        self,
        *,
        id: builtins.int = ...,
        uri: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["id", b"id", "uri", b"uri"]) -> None: ...

global___Webhook = Webhook

@typing.final
class ListOutgoingWebhooksResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    OUTGOING_WEBHOOKS_FIELD_NUMBER: builtins.int
    @property
    def outgoing_webhooks(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Webhook]: ...
    def __init__(
        self,
        *,
        outgoing_webhooks: collections.abc.Iterable[global___Webhook] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["outgoing_webhooks", b"outgoing_webhooks"]) -> None: ...

global___ListOutgoingWebhooksResponse = ListOutgoingWebhooksResponse

@typing.final
class DeleteOutgoingWebhooksRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NODE_ID_FIELD_NUMBER: builtins.int
    IDS_FIELD_NUMBER: builtins.int
    node_id: builtins.bytes
    @property
    def ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]: ...
    def __init__(
        self,
        *,
        node_id: builtins.bytes = ...,
        ids: collections.abc.Iterable[builtins.int] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["ids", b"ids", "node_id", b"node_id"]) -> None: ...

global___DeleteOutgoingWebhooksRequest = DeleteOutgoingWebhooksRequest

@typing.final
class RotateOutgoingWebhookSecretRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NODE_ID_FIELD_NUMBER: builtins.int
    WEBHOOK_ID_FIELD_NUMBER: builtins.int
    node_id: builtins.bytes
    webhook_id: builtins.int
    def __init__(
        self,
        *,
        node_id: builtins.bytes = ...,
        webhook_id: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["node_id", b"node_id", "webhook_id", b"webhook_id"]) -> None: ...

global___RotateOutgoingWebhookSecretRequest = RotateOutgoingWebhookSecretRequest

@typing.final
class WebhookSecretResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SECRET_FIELD_NUMBER: builtins.int
    secret: builtins.str
    def __init__(
        self,
        *,
        secret: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["secret", b"secret"]) -> None: ...

global___WebhookSecretResponse = WebhookSecretResponse

@typing.final
class ChallengeRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SCOPE_FIELD_NUMBER: builtins.int
    NODE_ID_FIELD_NUMBER: builtins.int
    scope: global___ChallengeScope.ValueType
    node_id: builtins.bytes
    def __init__(
        self,
        *,
        scope: global___ChallengeScope.ValueType = ...,
        node_id: builtins.bytes = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["node_id", b"node_id", "scope", b"scope"]) -> None: ...

global___ChallengeRequest = ChallengeRequest

@typing.final
class ChallengeResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CHALLENGE_FIELD_NUMBER: builtins.int
    challenge: builtins.bytes
    def __init__(
        self,
        *,
        challenge: builtins.bytes = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["challenge", b"challenge"]) -> None: ...

global___ChallengeResponse = ChallengeResponse

@typing.final
class RegistrationRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NODE_ID_FIELD_NUMBER: builtins.int
    BIP32_KEY_FIELD_NUMBER: builtins.int
    NETWORK_FIELD_NUMBER: builtins.int
    CHALLENGE_FIELD_NUMBER: builtins.int
    SIGNATURE_FIELD_NUMBER: builtins.int
    SIGNER_PROTO_FIELD_NUMBER: builtins.int
    INIT_MSG_FIELD_NUMBER: builtins.int
    CSR_FIELD_NUMBER: builtins.int
    INVITE_CODE_FIELD_NUMBER: builtins.int
    STARTUPMSGS_FIELD_NUMBER: builtins.int
    node_id: builtins.bytes
    """33 bytes node public key."""
    bip32_key: builtins.bytes
    """DEPRECATED: The `init_msg` subsumes this field"""
    network: builtins.str
    """Which network is this node going to run on? Options are
    bitcoin, testnet, and regtest.
    """
    challenge: builtins.bytes
    """An previously unused challenge as retrieved from
    `Scheduler.GetChallenge() with `scope=REGISTER`. In
    combination with the `signature` below this is used to
    authenticate the caller and ensure the caller has access to
    the secret keys corresponding to the `node_id`.
    """
    signature: builtins.bytes
    """A signature for the `challenge` signed by the secret key
    corresponding to the `node_id`. Please refer to the
    documentation of `Scheduler.GetChallenge()` for details on
    how to create this signature.
    """
    signer_proto: builtins.str
    """The signer_proto is required in order to determine which
    version the node should run. If these don't match the
    signer may not be able to sign incoming requests.
    """
    init_msg: builtins.bytes
    """The fuil init message returned by the `libhsmd`, this
    supersedes the bip32_key field which was a misnomer. Notice
    that this includes the prefix 0x006F which is the message
    type.
    """
    csr: builtins.bytes
    """The certificate signing request that will be signed by the
    greenlight backend. Notice that this must have the valid
    CN corresponding to the node_id e.g. /users/{node_id} set.
    """
    invite_code: builtins.str
    """An optional invite code. We may want to throttle the
    registration rate. Therefore we might check that a registration
    request has a valid invite code.
    """
    @property
    def startupmsgs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___StartupMessage]:
        """Messages stashed at the scheduler to allow signerless
        startups.
        """

    def __init__(
        self,
        *,
        node_id: builtins.bytes = ...,
        bip32_key: builtins.bytes = ...,
        network: builtins.str = ...,
        challenge: builtins.bytes = ...,
        signature: builtins.bytes = ...,
        signer_proto: builtins.str = ...,
        init_msg: builtins.bytes = ...,
        csr: builtins.bytes = ...,
        invite_code: builtins.str = ...,
        startupmsgs: collections.abc.Iterable[global___StartupMessage] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["bip32_key", b"bip32_key", "challenge", b"challenge", "csr", b"csr", "init_msg", b"init_msg", "invite_code", b"invite_code", "network", b"network", "node_id", b"node_id", "signature", b"signature", "signer_proto", b"signer_proto", "startupmsgs", b"startupmsgs"]) -> None: ...

global___RegistrationRequest = RegistrationRequest

@typing.final
class RegistrationResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DEVICE_CERT_FIELD_NUMBER: builtins.int
    DEVICE_KEY_FIELD_NUMBER: builtins.int
    RUNE_FIELD_NUMBER: builtins.int
    CREDS_FIELD_NUMBER: builtins.int
    device_cert: builtins.str
    """Upon registering the user receives back the signed certificate that
    belongs to the certificate signing request the that was sent in the
    registration request, so they can authenticate themselves in the future.
    """
    device_key: builtins.str
    """The private key that was used to create the certificate with. This key
    is used to sign the requests to the node.
    """
    rune: builtins.str
    """A master rune that is returned if the device that is registered has its
    own signer. The signer is necessary as the response is intercepted on the
    client side and appends the rune to the registratrion response.
    """
    creds: builtins.bytes
    """Creds contains a serialized version of the device_cert, the device_key
    and the rune that are used to authenticate a device at the backend,
    and to authorize a request at the signer.
    """
    def __init__(
        self,
        *,
        device_cert: builtins.str = ...,
        device_key: builtins.str = ...,
        rune: builtins.str = ...,
        creds: builtins.bytes = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["creds", b"creds", "device_cert", b"device_cert", "device_key", b"device_key", "rune", b"rune"]) -> None: ...

global___RegistrationResponse = RegistrationResponse

@typing.final
class ScheduleRequest(google.protobuf.message.Message):
    """Ask the scheduler to schedule the node to be run on an available nodelet.

    This will always cause the scheduler to kick into action. If you'd
    like to see if a nodelet is currently taking care of this node, or
    wait for one to start please use the
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NODE_ID_FIELD_NUMBER: builtins.int
    node_id: builtins.bytes
    def __init__(
        self,
        *,
        node_id: builtins.bytes = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["node_id", b"node_id"]) -> None: ...

global___ScheduleRequest = ScheduleRequest

@typing.final
class NodeInfoRequest(google.protobuf.message.Message):
    """Discovery request asking the scheduler if a nodelet is currently assigned
    the specified node_id, or wait for one to be assigned. If `wait` is set to
    `true` the scheduler will keep the request pending until a nodelet is
    assigned.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NODE_ID_FIELD_NUMBER: builtins.int
    WAIT_FIELD_NUMBER: builtins.int
    node_id: builtins.bytes
    wait: builtins.bool
    def __init__(
        self,
        *,
        node_id: builtins.bytes = ...,
        wait: builtins.bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["node_id", b"node_id", "wait", b"wait"]) -> None: ...

global___NodeInfoRequest = NodeInfoRequest

@typing.final
class NodeInfoResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NODE_ID_FIELD_NUMBER: builtins.int
    GRPC_URI_FIELD_NUMBER: builtins.int
    SESSION_ID_FIELD_NUMBER: builtins.int
    node_id: builtins.bytes
    grpc_uri: builtins.str
    session_id: builtins.int
    def __init__(
        self,
        *,
        node_id: builtins.bytes = ...,
        grpc_uri: builtins.str = ...,
        session_id: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["grpc_uri", b"grpc_uri", "node_id", b"node_id", "session_id", b"session_id"]) -> None: ...

global___NodeInfoResponse = NodeInfoResponse

@typing.final
class RecoveryRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CHALLENGE_FIELD_NUMBER: builtins.int
    SIGNATURE_FIELD_NUMBER: builtins.int
    NODE_ID_FIELD_NUMBER: builtins.int
    CSR_FIELD_NUMBER: builtins.int
    challenge: builtins.bytes
    signature: builtins.bytes
    node_id: builtins.bytes
    csr: builtins.bytes
    """The certificate signing request that will be signed by the
    greenlight backend. Notice that this must have the valid
    CN corresponding to the node_id e.g. /users/{node_id} set.
    """
    def __init__(
        self,
        *,
        challenge: builtins.bytes = ...,
        signature: builtins.bytes = ...,
        node_id: builtins.bytes = ...,
        csr: builtins.bytes = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["challenge", b"challenge", "csr", b"csr", "node_id", b"node_id", "signature", b"signature"]) -> None: ...

global___RecoveryRequest = RecoveryRequest

@typing.final
class RecoveryResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DEVICE_CERT_FIELD_NUMBER: builtins.int
    DEVICE_KEY_FIELD_NUMBER: builtins.int
    RUNE_FIELD_NUMBER: builtins.int
    CREDS_FIELD_NUMBER: builtins.int
    device_cert: builtins.str
    device_key: builtins.str
    rune: builtins.str
    """A master rune that is returned if the device that is registered has its
    own signer. The signer is necessary as the response is intercepted on the
    client side and appends the rune to the registratrion response.
    """
    creds: builtins.bytes
    """Creds contains a serialized version of the device_cert, the device_key
    and the rune that are used to authenticate a device at the backend,
    and to authorize a request at the signer.
    """
    def __init__(
        self,
        *,
        device_cert: builtins.str = ...,
        device_key: builtins.str = ...,
        rune: builtins.str = ...,
        creds: builtins.bytes = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["creds", b"creds", "device_cert", b"device_cert", "device_key", b"device_key", "rune", b"rune"]) -> None: ...

global___RecoveryResponse = RecoveryResponse

@typing.final
class UpgradeRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SIGNER_VERSION_FIELD_NUMBER: builtins.int
    INITMSG_FIELD_NUMBER: builtins.int
    STARTUPMSGS_FIELD_NUMBER: builtins.int
    signer_version: builtins.str
    """The version of the signer, i.e., the maximum version of the
    protocol that this signer can understand.
    """
    initmsg: builtins.bytes
    """The new initmsg matching the above version. Necessary to
    schedule the node without a signer present.
    Deprecated: Replaced by the more generic `startupmsgs`
    """
    @property
    def startupmsgs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___StartupMessage]:
        """Messages stashed at the scheduler to allow signerless startups."""

    def __init__(
        self,
        *,
        signer_version: builtins.str = ...,
        initmsg: builtins.bytes = ...,
        startupmsgs: collections.abc.Iterable[global___StartupMessage] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["initmsg", b"initmsg", "signer_version", b"signer_version", "startupmsgs", b"startupmsgs"]) -> None: ...

global___UpgradeRequest = UpgradeRequest

@typing.final
class UpgradeResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    OLD_VERSION_FIELD_NUMBER: builtins.int
    old_version: builtins.str
    """The version of the node before the upgrade request has been
    processed.
    """
    def __init__(
        self,
        *,
        old_version: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["old_version", b"old_version"]) -> None: ...

global___UpgradeResponse = UpgradeResponse

@typing.final
class StartupMessage(google.protobuf.message.Message):
    """A message that we know will be requested by `lightningd` at
    startup, and that we stash a response to on the scheduler. This
    allows the scheduler to start a node without requiring the signer
    to connect first. Messages are stored in full, including type
    prefix, but without the length prefix.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    REQUEST_FIELD_NUMBER: builtins.int
    RESPONSE_FIELD_NUMBER: builtins.int
    request: builtins.bytes
    response: builtins.bytes
    def __init__(
        self,
        *,
        request: builtins.bytes = ...,
        response: builtins.bytes = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["request", b"request", "response", b"response"]) -> None: ...

global___StartupMessage = StartupMessage

@typing.final
class ListInviteCodesRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___ListInviteCodesRequest = ListInviteCodesRequest

@typing.final
class ListInviteCodesResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    INVITE_CODE_LIST_FIELD_NUMBER: builtins.int
    @property
    def invite_code_list(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___InviteCode]: ...
    def __init__(
        self,
        *,
        invite_code_list: collections.abc.Iterable[global___InviteCode] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["invite_code_list", b"invite_code_list"]) -> None: ...

global___ListInviteCodesResponse = ListInviteCodesResponse

@typing.final
class InviteCode(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CODE_FIELD_NUMBER: builtins.int
    IS_REDEEMED_FIELD_NUMBER: builtins.int
    code: builtins.str
    is_redeemed: builtins.bool
    def __init__(
        self,
        *,
        code: builtins.str = ...,
        is_redeemed: builtins.bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["code", b"code", "is_redeemed", b"is_redeemed"]) -> None: ...

global___InviteCode = InviteCode

@typing.final
class ExportNodeRequest(google.protobuf.message.Message):
    """Empty message for now, node identity is extracted from the mTLS
    certificate used to authenticate against the Scheduler.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___ExportNodeRequest = ExportNodeRequest

@typing.final
class ExportNodeResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    URL_FIELD_NUMBER: builtins.int
    url: builtins.str
    """URL where the encrypted backup can be retrieved from."""
    def __init__(
        self,
        *,
        url: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["url", b"url"]) -> None: ...

global___ExportNodeResponse = ExportNodeResponse

@typing.final
class SignerRejection(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MSG_FIELD_NUMBER: builtins.int
    REQUEST_FIELD_NUMBER: builtins.int
    GIT_VERSION_FIELD_NUMBER: builtins.int
    NODE_ID_FIELD_NUMBER: builtins.int
    msg: builtins.str
    """A human-readable description of what went wrong"""
    git_version: builtins.str
    node_id: builtins.bytes
    @property
    def request(self) -> glclient.greenlight_pb2.HsmRequest: ...
    def __init__(
        self,
        *,
        msg: builtins.str = ...,
        request: glclient.greenlight_pb2.HsmRequest | None = ...,
        git_version: builtins.str = ...,
        node_id: builtins.bytes = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["request", b"request"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["git_version", b"git_version", "msg", b"msg", "node_id", b"node_id", "request", b"request"]) -> None: ...

global___SignerRejection = SignerRejection

@typing.final
class PairDeviceRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DEVICE_ID_FIELD_NUMBER: builtins.int
    CSR_FIELD_NUMBER: builtins.int
    DEVICE_NAME_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    RESTRICTIONS_FIELD_NUMBER: builtins.int
    device_id: builtins.str
    """The tls public key of the new device."""
    csr: builtins.bytes
    """The certificate signing request that will be signed by the
    greenlight backend if the pairing succeeds. Notice that the CN
    here is irrelevant.
    """
    device_name: builtins.str
    """The name of the device that will be part of the tls certificate
    subjects CN field: CN=/users/<node_id>/<device_name>.
    """
    description: builtins.str
    """A human readable description of the device, this can be a
    purpose or something similar. Can be used to display to the
    user on the old device.
    """
    restrictions: builtins.str
    """A set of restrictions that the new devices requests for the
    rune. This might in the future get upgraded for easier naming.
    """
    def __init__(
        self,
        *,
        device_id: builtins.str = ...,
        csr: builtins.bytes = ...,
        device_name: builtins.str = ...,
        description: builtins.str = ...,
        restrictions: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["csr", b"csr", "description", b"description", "device_id", b"device_id", "device_name", b"device_name", "restrictions", b"restrictions"]) -> None: ...

global___PairDeviceRequest = PairDeviceRequest

@typing.final
class PairDeviceResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DEVICE_ID_FIELD_NUMBER: builtins.int
    DEVICE_CERT_FIELD_NUMBER: builtins.int
    DEVICE_KEY_FIELD_NUMBER: builtins.int
    RUNE_FIELD_NUMBER: builtins.int
    CREDS_FIELD_NUMBER: builtins.int
    device_id: builtins.str
    """device_id is the public key of the new device used for the
    tls cert.
    """
    device_cert: builtins.str
    """Upon a pairing request, the device receives back the signed certificate
    that belongs to the certificate signing request the that was sent with
    the pairing request, so they can authenticate themselves in the future.
    """
    device_key: builtins.str
    """The private key that was used to create the certificate with. This key
    is used to sign the requests to the node.
    """
    rune: builtins.str
    """A rune that is returned if the device that is created by the signer that
    the device pairs to.
    """
    creds: builtins.bytes
    """Creds contains a serialized version of the device certificate, the device
    key and the rune that are used to authenticate a device at the backend,
    and to authorize a request at the signer.
    """
    def __init__(
        self,
        *,
        device_id: builtins.str = ...,
        device_cert: builtins.str = ...,
        device_key: builtins.str = ...,
        rune: builtins.str = ...,
        creds: builtins.bytes = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["creds", b"creds", "device_cert", b"device_cert", "device_id", b"device_id", "device_key", b"device_key", "rune", b"rune"]) -> None: ...

global___PairDeviceResponse = PairDeviceResponse

@typing.final
class GetPairingDataRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DEVICE_ID_FIELD_NUMBER: builtins.int
    device_id: builtins.str
    """The device_id that the client got from the qr-code."""
    def __init__(
        self,
        *,
        device_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["device_id", b"device_id"]) -> None: ...

global___GetPairingDataRequest = GetPairingDataRequest

@typing.final
class GetPairingDataResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DEVICE_ID_FIELD_NUMBER: builtins.int
    CSR_FIELD_NUMBER: builtins.int
    DEVICE_NAME_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    RESTRICTIONS_FIELD_NUMBER: builtins.int
    device_id: builtins.str
    csr: builtins.bytes
    """The certificate signing request that will be signed by the
    greenlight backend if the pairing succeeds. Notice that the CN
    here is irrelevant.
    """
    device_name: builtins.str
    """The name of the device that will be part of the tls certificate
    subjects CN field: CN=/users/<node_id>/<device_name>.
    """
    description: builtins.str
    """A human readable description of the device, this can be a
    purpose or something similar. Can be used to display to the
    user on the old device.
    """
    restrictions: builtins.str
    """A set of restrictions that the new devices requests for the
    rune. This might in the future get upgraded for easier naming.
    """
    def __init__(
        self,
        *,
        device_id: builtins.str = ...,
        csr: builtins.bytes = ...,
        device_name: builtins.str = ...,
        description: builtins.str = ...,
        restrictions: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["csr", b"csr", "description", b"description", "device_id", b"device_id", "device_name", b"device_name", "restrictions", b"restrictions"]) -> None: ...

global___GetPairingDataResponse = GetPairingDataResponse

@typing.final
class ApprovePairingRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DEVICE_ID_FIELD_NUMBER: builtins.int
    TIMESTAMP_FIELD_NUMBER: builtins.int
    DEVICE_NAME_FIELD_NUMBER: builtins.int
    RESTRICTIONS_FIELD_NUMBER: builtins.int
    SIG_FIELD_NUMBER: builtins.int
    PUBKEY_FIELD_NUMBER: builtins.int
    RUNE_FIELD_NUMBER: builtins.int
    device_id: builtins.str
    timestamp: builtins.int
    """The time that the old device approved the pairing request. This
    is used by the signer to restrict the duration an approval
    request is valid.
    """
    device_name: builtins.str
    """The name of the device that will be part of the tls certificate
    subjects CN field: CN=/users/<node_id>/<device_name>.
    """
    restrictions: builtins.str
    """The restrictions need a pubkey set."""
    sig: builtins.bytes
    """The signature of the above to ensure data integrity."""
    pubkey: builtins.bytes
    """The public key corresponding to the private key that was used
    to sign the request and that is part of the rune;
    """
    rune: builtins.str
    """The rune of the old device with a pubkey field corresponding to
    the signature above. Used to authorize the approval request.
    """
    def __init__(
        self,
        *,
        device_id: builtins.str = ...,
        timestamp: builtins.int = ...,
        device_name: builtins.str = ...,
        restrictions: builtins.str = ...,
        sig: builtins.bytes = ...,
        pubkey: builtins.bytes = ...,
        rune: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["device_id", b"device_id", "device_name", b"device_name", "pubkey", b"pubkey", "restrictions", b"restrictions", "rune", b"rune", "sig", b"sig", "timestamp", b"timestamp"]) -> None: ...

global___ApprovePairingRequest = ApprovePairingRequest

@typing.final
class ApprovePairingResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DEVICE_ID_FIELD_NUMBER: builtins.int
    NODE_ID_FIELD_NUMBER: builtins.int
    RUNE_FIELD_NUMBER: builtins.int
    device_id: builtins.str
    node_id: builtins.bytes
    rune: builtins.str
    def __init__(
        self,
        *,
        device_id: builtins.str = ...,
        node_id: builtins.bytes = ...,
        rune: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["device_id", b"device_id", "node_id", b"node_id", "rune", b"rune"]) -> None: ...

global___ApprovePairingResponse = ApprovePairingResponse

@typing.final
class SignerRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    REQUEST_ID_FIELD_NUMBER: builtins.int
    APPROVE_PAIRING_FIELD_NUMBER: builtins.int
    request_id: builtins.int
    @property
    def approve_pairing(self) -> global___ApprovePairingRequest: ...
    def __init__(
        self,
        *,
        request_id: builtins.int = ...,
        approve_pairing: global___ApprovePairingRequest | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["approve_pairing", b"approve_pairing", "request", b"request"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["approve_pairing", b"approve_pairing", "request", b"request", "request_id", b"request_id"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["request", b"request"]) -> typing.Literal["approve_pairing"] | None: ...

global___SignerRequest = SignerRequest

@typing.final
class SignerResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    REQUEST_ID_FIELD_NUMBER: builtins.int
    EMPTY_FIELD_NUMBER: builtins.int
    APPROVE_PAIRING_FIELD_NUMBER: builtins.int
    request_id: builtins.int
    @property
    def empty(self) -> glclient.greenlight_pb2.Empty: ...
    @property
    def approve_pairing(self) -> global___ApprovePairingResponse: ...
    def __init__(
        self,
        *,
        request_id: builtins.int = ...,
        empty: glclient.greenlight_pb2.Empty | None = ...,
        approve_pairing: global___ApprovePairingResponse | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["approve_pairing", b"approve_pairing", "empty", b"empty", "response", b"response"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["approve_pairing", b"approve_pairing", "empty", b"empty", "request_id", b"request_id", "response", b"response"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["response", b"response"]) -> typing.Literal["empty", "approve_pairing"] | None: ...

global___SignerResponse = SignerResponse

@typing.final
class ListLspsRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___ListLspsRequest = ListLspsRequest

@typing.final
class ListLspsResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class LspsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___Lsp: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___Lsp | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    LSPS_FIELD_NUMBER: builtins.int
    @property
    def lsps(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___Lsp]:
        """A map that maps the public keys of known LSPs to the information we have
        about them.
        """

    def __init__(
        self,
        *,
        lsps: collections.abc.Mapping[builtins.str, global___Lsp] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["lsps", b"lsps"]) -> None: ...

global___ListLspsResponse = ListLspsResponse

@typing.final
class Lsp(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PROTOCOLS_FIELD_NUMBER: builtins.int
    @property
    def protocols(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """An object that contains the supported protocols with additional
        information about the LSPs conditions.
        """

    def __init__(
        self,
        *,
        protocols: collections.abc.Iterable[builtins.int] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["protocols", b"protocols"]) -> None: ...

global___Lsp = Lsp

@typing.final
class GetLspInfoRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PUBLIC_KEY_FIELD_NUMBER: builtins.int
    public_key: builtins.str
    """The public key of the LSP of interest."""
    def __init__(
        self,
        *,
        public_key: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["public_key", b"public_key"]) -> None: ...

global___GetLspInfoRequest = GetLspInfoRequest

@typing.final
class GetLspInfoResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PUBLIC_KEY_FIELD_NUMBER: builtins.int
    PROTOCOLS_FIELD_NUMBER: builtins.int
    public_key: builtins.str
    """The public key of the LSP."""
    @property
    def protocols(self) -> global___LspProtocols:
        """Infos about the supported protocols."""

    def __init__(
        self,
        *,
        public_key: builtins.str = ...,
        protocols: global___LspProtocols | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["protocols", b"protocols"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["protocols", b"protocols", "public_key", b"public_key"]) -> None: ...

global___GetLspInfoResponse = GetLspInfoResponse

@typing.final
class LspProtocols(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LSPS1_FIELD_NUMBER: builtins.int
    LSPS2_FIELD_NUMBER: builtins.int
    @property
    def lsps1(self) -> global___Lsps1Info:
        """Optional information relating to the lsps1 protocol. Is only present if
        the LSP supports the protocol.
        """

    @property
    def lsps2(self) -> global___Lsps2Info:
        """Optional information relating to the lsps2 protocol. Is only present if
        the LSP supports the protocol.
        """

    def __init__(
        self,
        *,
        lsps1: global___Lsps1Info | None = ...,
        lsps2: global___Lsps2Info | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["lsps1", b"lsps1", "lsps2", b"lsps2"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["lsps1", b"lsps1", "lsps2", b"lsps2"]) -> None: ...

global___LspProtocols = LspProtocols

@typing.final
class Lsps1Info(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MIN_REQUIRED_CHANNEL_CONFIRMATIONS_FIELD_NUMBER: builtins.int
    MIN_FUNDING_CONFIRMS_WITHIN_BLOCKS_FIELD_NUMBER: builtins.int
    SUPPORTS_ZERO_CHANNEL_RESERVE_FIELD_NUMBER: builtins.int
    MAX_CHANNEL_EXPIRY_BLOCKS_FIELD_NUMBER: builtins.int
    MIN_INITIAL_CLIENT_BALANCE_SAT_FIELD_NUMBER: builtins.int
    MAX_INITIAL_CLIENT_BALANCE_SAT_FIELD_NUMBER: builtins.int
    MIN_INITIAL_LSP_BALANCE_SAT_FIELD_NUMBER: builtins.int
    MAX_INITIAL_LSP_BALANCE_SAT_FIELD_NUMBER: builtins.int
    MIN_CHANNEL_BALANCE_SAT_FIELD_NUMBER: builtins.int
    MAX_CHANNEL_BALANCE_SAT_FIELD_NUMBER: builtins.int
    min_required_channel_confirmations: builtins.int
    """The smallest number of confirmations needed for the LSP to accept a
    channel as confirmed and sends `channel_ready` (see bolt02).
    """
    min_funding_confirms_within_blocks: builtins.int
    """The smallest number of blocks in which the LSP can confirm the funding
    transaction.
    """
    supports_zero_channel_reserve: builtins.bool
    """Is true if the LSP supports zeroreserve on the channel."""
    max_channel_expiry_blocks: builtins.int
    """Is the maximum number of blocks a channel can be leased for."""
    min_initial_client_balance_sat: builtins.int
    """The minimum amount in satoshis that a client must request."""
    max_initial_client_balance_sat: builtins.int
    """The maximum amount in satoshis that a client must request."""
    min_initial_lsp_balance_sat: builtins.int
    """The minimum amount in satoshis that the LSP will provide to the channel."""
    max_initial_lsp_balance_sat: builtins.int
    """The maximum amount in satoshis that the LSP will provide to the channel."""
    min_channel_balance_sat: builtins.int
    """The minimum channel size the LSP accepts."""
    max_channel_balance_sat: builtins.int
    """The maximum channel size the LSP accepts."""
    def __init__(
        self,
        *,
        min_required_channel_confirmations: builtins.int = ...,
        min_funding_confirms_within_blocks: builtins.int = ...,
        supports_zero_channel_reserve: builtins.bool = ...,
        max_channel_expiry_blocks: builtins.int = ...,
        min_initial_client_balance_sat: builtins.int = ...,
        max_initial_client_balance_sat: builtins.int = ...,
        min_initial_lsp_balance_sat: builtins.int = ...,
        max_initial_lsp_balance_sat: builtins.int = ...,
        min_channel_balance_sat: builtins.int = ...,
        max_channel_balance_sat: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["max_channel_balance_sat", b"max_channel_balance_sat", "max_channel_expiry_blocks", b"max_channel_expiry_blocks", "max_initial_client_balance_sat", b"max_initial_client_balance_sat", "max_initial_lsp_balance_sat", b"max_initial_lsp_balance_sat", "min_channel_balance_sat", b"min_channel_balance_sat", "min_funding_confirms_within_blocks", b"min_funding_confirms_within_blocks", "min_initial_client_balance_sat", b"min_initial_client_balance_sat", "min_initial_lsp_balance_sat", b"min_initial_lsp_balance_sat", "min_required_channel_confirmations", b"min_required_channel_confirmations", "supports_zero_channel_reserve", b"supports_zero_channel_reserve"]) -> None: ...

global___Lsps1Info = Lsps1Info

@typing.final
class Lsps2Info(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    OPENING_FEE_PARAMS_MENU_FIELD_NUMBER: builtins.int
    @property
    def opening_fee_params_menu(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Lsps2OpeningFeeParams]:
        """The LSP may return an empty array in which case, the client currently
        cannot use JIT channels with this LSP.
        """

    def __init__(
        self,
        *,
        opening_fee_params_menu: collections.abc.Iterable[global___Lsps2OpeningFeeParams] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["opening_fee_params_menu", b"opening_fee_params_menu"]) -> None: ...

global___Lsps2Info = Lsps2Info

@typing.final
class Lsps2OpeningFeeParams(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MIN_FEE_MSAT_FIELD_NUMBER: builtins.int
    PROPORTIONAL_FIELD_NUMBER: builtins.int
    VALID_UNTIL_FIELD_NUMBER: builtins.int
    MIN_LIFETIME_FIELD_NUMBER: builtins.int
    MAX_CLIENT_TO_SELF_DELAY_FIELD_NUMBER: builtins.int
    MIN_PAYMENT_SIZE_MSAT_FIELD_NUMBER: builtins.int
    MAX_PAYMENT_SIZE_MSAT_FIELD_NUMBER: builtins.int
    PROMISE_FIELD_NUMBER: builtins.int
    min_fee_msat: builtins.int
    """The minimum fee to be paid by the client to the LSP."""
    proportional: builtins.int
    """A parts-per-million number that describes how many millisatoshis to charge
    for every 1 million millisatoshis of payment size for the first payment. If
    the proportional fee is less than than `min_fee_msat`, then `min_fee_msat`
    is paid instead of the proportional times payment size divided by 1
    million.
    """
    valid_until: builtins.str
    """Is a datetime (as an ISO8601 string) up to which this specific
    `opening_fee_params` is valid, and also serves as the timeout for the JIT
    Channel flow, if this particular object is selected.
    """
    min_lifetime: builtins.int
    """Is a number of blocks that the LSP promises it will keep the channel alive
    without closing, after confirmation.
    """
    max_client_to_self_delay: builtins.int
    """Is a maximum number of blocks that the client is allowed to set its
    `to_self_pay_delay` parameter.
    """
    min_payment_size_msat: builtins.int
    """Is the minimum payment size, inclusive. Is the amount in millisatoshis that
    the payer is guaranteed to be able to send to the client, not including the
    forwarding fees of nodes along the way.
    """
    max_payment_size_msat: builtins.int
    """Is the maximum payment size, inclusive. Is the amount in millisatoshis that
    the payer is guaranteed to be able to send to the client, not including the
    forwarding fees of nodes along the way.
    """
    promise: builtins.str
    """An arbitrary LSP-genereated string that proves to the LSP that it has
    promised a specific `opening_fee_params`.
    """
    def __init__(
        self,
        *,
        min_fee_msat: builtins.int = ...,
        proportional: builtins.int = ...,
        valid_until: builtins.str = ...,
        min_lifetime: builtins.int = ...,
        max_client_to_self_delay: builtins.int = ...,
        min_payment_size_msat: builtins.int = ...,
        max_payment_size_msat: builtins.int = ...,
        promise: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["max_client_to_self_delay", b"max_client_to_self_delay", "max_payment_size_msat", b"max_payment_size_msat", "min_fee_msat", b"min_fee_msat", "min_lifetime", b"min_lifetime", "min_payment_size_msat", b"min_payment_size_msat", "promise", b"promise", "proportional", b"proportional", "valid_until", b"valid_until"]) -> None: ...

global___Lsps2OpeningFeeParams = Lsps2OpeningFeeParams
